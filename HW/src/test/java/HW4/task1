
1)  Почему использование тестовых заглушек может быть полезным при написании модульных тестов?
    Потому что они позволяют получить следующие возможности:
    Изоляция: Тестовые заглушки позволяют изолировать тестируемый модуль от внешних зависимостей, что упрощает тестирование и делает его более надежным.
    Управление сложностью: При их использовании можно сосредоточиться на тестировании одного конкретного аспекта или функции модуля, не отвлекаясь на другие внешние зависимости.
    Повторное использование: Заглушки могут быть использованы для создания модульных тестов, которые можно легко повторять и адаптировать для различных сценариев тестирования.
    Улучшение покрытия кода: Тестирование каждого модуля помогает гарантировать, что весь код покрывается тестами, что снижает вероятность ошибок и улучшает качество продукта.
    Отладка: Позволяет лучше контролировать процесс отладки, т.к. можно изменять поведение заглушки для имитации различных сценариев и условий,
                          что может помочь быстрее определить и исправить ошибки.
    Ускорение разработки: Не нужно заботиться о создании и настройке реальных зависимостей для каждого модульного теста, что ускоряет процесс разработки и позволяет
                          быстрее проверять и добавлять новые функциональные возможности.

2) Какой тип тестовой заглушки следует использовать, если вам нужно проверить, что метод был вызван с определенными аргументами?

    Для этого следует использовать заглушку, которая фиксирует аргументы метода и затем сравнивает их с ожидаемыми аргументами.
    Это может быть реализовано с помощью библиотек Mockito или EasyMock. Они позволяют создавать “моки” или заглушки методов,
    а затем контролировать и проверять их поведение.

3) Какой тип тестовой заглушки следует использовать, если вам просто нужно вернуть определенное значение или исключение в ответ на вызов метода?
    Стоит использовать возвращающие заглушки - Стабы. Они возвращают указанное значение или выбрасывают указанное исключение при вызове метода.

4) Какой тип тестовой заглушки вы бы использовали для имитации  взаимодействия с внешним API или базой данных?
    Имитационные заглушки - Fake. Они используются для имитации работы внешних сервисов, таких как API или базы данных, в процессе тестирования.
    Позволяют заменить реальные зависимости на fake-объекты, возвращающие заранее определенные результаты или вызывают заданные методы,
    имитируя работу внешних систем. Позволяют не заботиться о подключении и настройке внешних зависимостей.
